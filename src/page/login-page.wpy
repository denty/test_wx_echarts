<template>
    <alert></alert>
    <view class="large-title">手机号登录</view>
    <view class="input-holder">
        <input class="input" placeholder="请输入手机号" placeholder-class="input-placeholder" value="{{phoneNumber}}" bindinput="bindPhoneNumberInput"
        />
        <view wx:if="{{phoneNumber != ''}}" bindtap="clearPhoneNumber" style="height: 30px; line-height: 30px; margin-right: 15px; flex-grow: 1; display:flex; flex-direction:row-reverse;">
            <clearImage :imageObj.sync="clearImageObj"></clearImage>
        </view>
    </view>
    <view class="split-line"></view>
    <view class="input-holder">
        <input class="input" placeholder="请输入验证码" value="{{authCode}}" placeholder-class="input-placeholder" bindinput="bindAuthCodeInput"
        />
        <view bindtap="requestAuthCode" class="requestCode">{{authCodeButtonText}}</view>
    </view>
    <view class="split-line"></view>
    <loginBtn class="full-button" :buttonConstructor.sycn="loginButtonConstructor" @touchUpInside.user="loginAction"></loginBtn>
</template>

<script>
    import wepy from 'wepy';
    import OriginImage from '../components/shl-components/original-frame-image';
    import SHLButton from '../components/shl-components/shl-button';
    import networkHelper from '../components/shl-components/network-components/network-helper';
    import Alert from '../components/shl-components/alert-component';
    export default class LoginPage extends wepy.page {
        components = {
            clearImage: OriginImage,
            loginBtn: SHLButton,
            alert: Alert,
        };

        config = {
            navigationBarTitleText: ''
        };

        data = {
            clearImageObj: {
                imagePath: '../components/images/function_icon/cancel.png'
            },
            phoneNumber: '',
            authCode: '',
            loginButtonConstructor: {
                type: 'infoButton',
                title: '登录',
                enable: false
            },
            authCodeButtonText: '点击获取'
        };

        methods = {
            clearPhoneNumber() {
                this.phoneNumber = '';
                this.checkLoginButtonStatus();
            },
            requestAuthCode() {
                if (this.authCodeButtonText === '点击获取' || this.authCodeButtonText === '再次获取') {
                    this.startAuthCodeHttpServer();
                }
            },
            bindPhoneNumberInput(el) {
                this.phoneNumber = el.detail.value;
                this.checkLoginButtonStatus();
            },
            bindAuthCodeInput(el) {
                this.authCode = el.detail.value;
                this.checkLoginButtonStatus();
            },
            loginAction() {
                this.loginHttpServer();
            }
        }

        async loginHttpServer(params) {
            const json = await networkHelper.postLogin({
                'type': 2,
                'mobile': this.phoneNumber,
                'vcode': this.authCode,
                'deviceID': '1'
            });
            if (json && json.data) {
                if (json.data.error) {
                    this.$invoke('alert', 'showToast', {
                        img: '../components/images/function_icon/problem.png',
                        content: json.data.error_text,
                        duration: 2000
                    });
                    return;
                }
                this.saveUserInfo(json.data);
                this.$invoke('alert', 'showToast', {
                    img: '../components/images/function_icon/acceptance.png',
                    content: '登录成功!',
                    duration: 2000
                });
            } else {
                this.$invoke('alert', 'showToast', {
                    img: '../components/images/function_icon/problem.png',
                    content: '网络错误!',
                    duration: 2000
                });
            }
        }

        saveUserInfo(userInfo) {
            wx.setStorage({
                key: 'user',
                data: userInfo
            });
        }

        checkLoginButtonStatus() {
            if (this.phoneNumber !== '' && this.authCode !== '') {
                this.loginButtonConstructor.enable = true;
                console.log('true');
            } else {
                this.loginButtonConstructor.enable = false;
                console.log('false');
            }
            this.$invoke('loginBtn', '$apply');
        }

        async startAuthCodeHttpServer() {
            const json = await networkHelper.getAuthCode({
                'mobile': this.phoneNumber,
            });
            if (json && json.data) {
                if (json.data.error) {
                    this.$invoke('alert', 'showToast', {
                        img: '../components/images/function_icon/problem.png',
                        content: json.data.error_text,
                        duration: 2000
                    });
                    return;
                }
                this.countDownAuthTime();
            } else {
                this.$invoke('alert', 'showToast', {
                    img: '../components/images/function_icon/problem.png',
                    content: '网络错误!',
                    duration: 2000
                });
            }
        }

        countDownAuthTime() {
            setTimeout(() => {
                if (this.authCodeButtonText === '点击获取' || this.authCodeButtonText === '再次获取') {
                    this.authCodeButtonText = 59;
                    this.countDownAuthTime();
                } else if (typeof this.authCodeButtonText === 'number' && this.authCodeButtonText > 1) {
                    this.authCodeButtonText = this.authCodeButtonText - 1;
                    this.countDownAuthTime();
                } else {
                    this.authCodeButtonText = '再次获取';
                }
                this.$apply();
            }, 1000);
        }
    }

</script>

<style>
    .large-title {
        margin-top: 30px;
        font-size: 30px;
        font-weight: bold;
        margin-left: 15px;
        margin-bottom: 30px;
    }

    .split-line {
        height: 1px;
        margin-left: 15px;
        margin-right: 15px;
        background-color: #ECECEC;
        margin-bottom: 25px;
    }

    .input-holder {
        display: flex;
    }

    .input {
        height: 50;
        min-height: 50;
        margin-left: 15px;
        margin-bottom: 0px;
        font-size: 17px;
    }

    .requestCode {
        color: #FEB34A;
        font-size: 14px;
        flex-grow: 1;
        text-align: right;
        margin-right: 15px
    }

    .input-placeholder {
        color: #999999;
        font-weight: 300;
    }

    .full-button {
        height: 49px;
        line-height: 49px;
        margin-left: 20px;
        margin-right: 20px;
        margin-top: 50px;
        margin-bottom: 10px;
    }

</style>
